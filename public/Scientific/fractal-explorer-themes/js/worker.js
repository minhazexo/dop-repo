
// js/worker.js
export class WorkerManager{
  constructor(workerURL){ this.workerURL=workerURL; this.palette=null; this.poolSize=Math.max(1,(navigator.hardwareConcurrency||4)-1); this.workers=[]; this.jobId=0; for(let i=0;i<this.poolSize;i++){ const w=new Worker(workerURL,{type:'module'}); w.busy=false; this.workers.push(w);} }
  setPalette(palette){ this.palette=new Uint8Array(palette); for(const w of this.workers){ w.postMessage({type:'palette',palette:this.palette}); } }
  terminate(){ for(const w of this.workers) w.terminate(); this.workers.length=0; }
  render(ctx,params){ const jobId=++this.jobId; const {width,height}=params; const tile=160; const cols=Math.ceil(width/tile); const rows=Math.ceil(height/tile); let pending=cols*rows; const image=ctx.createImageData(width,height); const tiles=[]; for(let ty=0;ty<rows;ty++){ for(let tx=0;tx<cols;tx++){ const x0=tx*tile,y0=ty*tile; const w=Math.min(tile,width-x0); const h=Math.min(tile,height-y0); tiles.push({x0,y0,w,h}); }} let nextTile=0; const assign=(worker)=>{ if(jobId!==this.jobId) return; const t=tiles[nextTile++]; if(!t) return; worker.busy=true; worker.onmessage=(e)=>{ const msg=e.data; if(msg.type==='tile'&&msg.jobId===jobId){ const {x0,y0,w,h}=msg; const src=new Uint8ClampedArray(msg.pixels); for(let j=0;j<h;j++){ const dstOffset=((y0+j)*width+x0)*4; const srcOffset=(j*w)*4; image.data.set(src.subarray(srcOffset,srcOffset+w*4),dstOffset);} pending--; worker.busy=false; if(pending===0&&jobId===this.jobId){ ctx.putImageData(image,0,0);} else assign(worker); }}; worker.postMessage({type:'tile',jobId,params,tile:t}); }; for(const w of this.workers) assign(w); }
  async renderSmall(width,height,params){ return new Promise((resolve)=>{ const w=new Worker(this.workerURL,{type:'module'}); if(this.palette) w.postMessage({type:'palette',palette:this.palette}); w.onmessage=(e)=>{ const msg=e.data; if(msg.type==='tile'){ const idata=new ImageData(new Uint8ClampedArray(msg.pixels),width,height); w.terminate(); resolve(idata);} }; w.postMessage({ type:'tile', jobId:1, params:{...params,width,height}, tile:{x0:0,y0:0,w:width,h:height} }); }); }
}
